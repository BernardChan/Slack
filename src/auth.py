import hashlib
from datetime import datetime
    
def get_valid_token(email):
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    #print(current_time)
    unique_combo = current_time + email
    token = hashlib.sha256(unique_combo.encode()).hexdigest()
    #print(token)
    return token

"""
Given a user's first and last name, email address, and password, create a new account for them and return a new token for authentication in their session. A handle is generated that is the concatentation of a lowercase-only first name and last name. If the concatenation is longer than 20 characters, it is cutoff at 20 characters. If the handle is already taken, you may modify the handle in any way you see fit to make it unique.
"""

def auth_register(email, password, name_first, name_last):
    
    # Stage 1 - Validate input. 
    # TODO Validate Email
    # TODO Validate password
    # TODO Validate name_first
    # TODO Validate name_last
        # Handle
        # TODO Concatenate first/last name
        # TODO ensure the handle is 20 or less chars
        # TODO modify handle to ensure it's unique
    # assume the inputs are valid to rush though the function
    # Above items will be completed after core token capability in place
    # TODO raise an input error and send back a message if incorrect
    
    # Stage 2 - Password hash
    # Code = hashlib.sha256(current_time.encode()).hexdigest()
    # TODO Hash password
    # look at jwt once the rest is working
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    
    # Stage 3 - check database 
    # TODO ensure that there isn't already the same email there
    # TODO find which u_id the new user will have.
    # TODO implement this in database helper functions
    # If the user IS registered then I will ASSUME they just get logged in.
    
    # Stage 4 - Token
    # I'll then make a hash of the current time logging in and username
    # this will be stored along with the rest of the info.
    token = get_valid_token(email)
    
    # Stage 5 - Store all user information in the database
    # TODO this should be implemented in database helper function.
    # TODO Return the u_id of the user inserted into the database.
    
    # u_id would normally be generated by what was available in the database as a unique identifier. Hard coded for now.
    register_dict = {}
    register_dict['u_id'] = 1
    register_dict['token'] = token
    return register_dict
    
def auth_login(email, password):
    login_dict = {}
    login_dict['u_id'] = 1
    login_dict['token'] = get_valid_token(email)
    #print("Logging In")
    return {
        'u_id': 1,
        'token': '12345',
    }
        
def auth_logout(token):
    #print("Logging Out")
    return {
        'is_success': True,
    }

    
if __name__ == '__main__':
    auth_register("dankoenen0@gmail.com", "password@123", "Daniel", "Koenen")
    auth_login(get_valid_token("dankoenen0@gmail.com"), "password@123")
    auth_logout(get_valid_token("dankoenen0@gmail.com"))
